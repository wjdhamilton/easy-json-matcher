c
exit
_is_root?
is_root?
key.to_s
candidate
candidate[key.to_s]
@content = _is_root? ? candidate : candidate[key.to_s]
puts "a" if _is_root?
_is_root? == true
_is_root? == false
candidate
c
_is_root?
exit
content
n
key
candidate
c
exit
key
_set_content(candidate)
candidate
s
c
exit
_prep_candidate(candidate)
candidate
c
exit
test_schema
c
exit
candidate[key.to_s]
content[key]
key
candidate
s
self
s
val
s
n
s
n
s
exit
content
n
s
validator
s
n
self
candidate[key.to_s]
key
candidate[key]
candidate
s
val
s
n
s
exit
n
s
n
candidate
s
exit
c
_prep_candidate(candidate)
_prep_content(candidate)
bt
c
exit
content
exit
key
exit
c
exit
key
candidate
content
c
options
c
options
c
options
c
options
c
options
c
exit
c
n
node
n
self
validator
n
options
n
validator
n
options
self
c
self
self.class
exit
node
n
key
n
key
n
options
c
key
n
options
c
n
options
c
validator
key
n
c
key
opts
n
options
optioins
key
bt
c
key
bt
c
bt
options
exit
options[:key].to_s
options[:key]
c
options
c
options
exit
candidate
key
content
exit
c
exit
n
candidate
exit
c
options[:key]
s
opts
validator_class
n
s
opts
c
opts
c
opts
c
exit
content
exit
c
exit
bt
opts
key
c
key
c
exit
key
content
c
exit
rake
candidate
bt
self
candidate
key
content
exit
c
exit
name
c
name
c
name
Node.new(opts: validator_opts(name, {}))
c
exit
key
_prep_candidate(candidate)
@content
content
n
candidate
c
exit
(string_validator.valid? json) && (0)
(string_validator.valid? json) && 0
string_validator.valid? json && 0
string_validator.valid? json
string_validator.valid?
string_validator.valid? json && json =~ DEFAULT_DATE_REGEXP
s
n
s
n
s
n
s
c
s
string_validator.valid? json
string_validator.valid?
json =~ DEFAULT_DATE_REGEXP
json
s
n
s
validator
n
content[key.to_s]
content
key
s
n
s
c
exit
content
s
content
n
s
